<!--
	https://github.com/darkrecher/pru-pra-prok
	Ceci est un exemple de film écrit en SPLASH.
	Le format de ce fichier est sensible à la casse (les majuscules-minuscules sont importantes).

	C'est du pseudo-XML crados. Je vous aurais prévenus. En plus mes explications sont bordeliques parce que
	j'ai pas que ça à foutre de décrire mon format de POILS BITE VAGIN COUILLES NICHONS MENOPAUSE URÊTRE PHALLUS !!!
-->


<!-- Balise initiale obligatoire. Parce que j'avais envie -->
<? paye ta chatte ?>

<!--
	Balise englobante obligatoire.
	"SPLASH" est un acronyme de "South Park, L'Abominable Script à Histoire". C'est rigolo.
-->
<SPLASH>

<!--
	Facultatif.
	Utile uniquement pour la barre de progression lors du chargement initial.
	Si ces infos sont absentes ou incorrectes, ça fonctionne quand même, mais la barre de progress est imprécise.
-->
<ProgressBarInfo>
	<!-- Nombre de fichiers images et sons à charger. (Nombre d'éléments dans la balise ImgSoundFiles) -->
	<FileToExtract> 3 </FileToExtract>
	<!-- Nombre de listes d'images (balises ImgListDef) -->
	<ImgListToCreate> 2 </ImgListToCreate>
	<!-- Nombre de procédure (balises Procedure) -->
	<ProcedureToCreate> 1 </ProcedureToCreate>
</ProgressBarInfo>

<!-- Déclaration des fichiers images et sons à charger. -->
<ImgSoundFiles>
	<!--
		Format d'image : .png uniquement.
		Format des sons : .wav uniquement.
		Les fichiers doivent être dans le même répertoire que le film.
		On peut également utiliser des fichiers compressés dans un format spécifique (fichier .cul).
		Voir le readme de l'utilitaire concat_files pour plus d'infos. (TODO : je ne me suis pas encore occupé de ça).
	-->
	<LoadImg> Collines </LoadImg>
	<LoadImg> Piaf </LoadImg>
	<LoadSnd> Croa </LoadSnd>
</ImgSoundFiles>


<!-- ****************************************************************************************** -->

<!-- Définition des listes d'images, qui serviront ensuite à faire les sprites. -->
<LoadData>

	<!-- Une première liste, qui contiendra toutes les images de l'oiseau. -->
	<ImgListDef> <Name> Piaf_ImgList </Name>

		<!-- Déclaration de la première image. -->
		<Img> <Name> Ailes_plies </Name>

			<!-- Indique le fichier image source (correspond à une balise LoadImg). -->
			<ImageSource> Piaf </ImageSource>

			<!--
				Définition du carré délimitant l'image à récupérer, dans le fichier image source.
				X, Y : coordonnées du coin supérieur gauche.
				W, H : width (largeur), height (longueur).
			-->
			<SquareSource> <X> 0 </X> <Y> 0 </Y> <W> 33 </W> <H> 20 </H> </SquareSource>

			<!--
				Coordonnées du hot-point.
				Le placement de l'image à l'écran est effectué par rapport au hot-point.
				C'est plus pratique que de placer par rapport au coin supérieur gauche.
				Pour chaque image du sprite, le hot-point doit toujours indiquer le même élément,
				afin d'éviter des mouvements bizarres lors d'un changement d'image.
				Pour l'oiseau, j'ai choisi le point entre ses deux yeux.
				Blablabla blablabla, qu'est-ce que je peux raconter comme conneries quand je m'y mets.
				J'en ai rien à carrer, c'est pas comme si mes explications devaient être claires.
			-->
			<HotPoint> <X> 16 </X> <Y> 6 </Y> </HotPoint>

		</Img>

		<!-- La deuxième image de la liste. -->
		<Img> <Name> Ailes_haut </Name>
			<ImageSource> Piaf </ImageSource>
			<SquareSource> <X> 33 </X> <Y> 0 </Y> <W> 33 </W> <H> 24 </H> </SquareSource>
			<HotPoint> <X> 16 </X> <Y> 17 </Y> </HotPoint>
		</Img>

		<!-- La dernière. -->
		<Img> <Name> Ailes_bas </Name>
			<ImageSource> Piaf </ImageSource>
			<SquareSource> <X> 66 </X> <Y> 0 </Y> <W> 21 </W> <H> 29 </H> </SquareSource>
			<HotPoint> <X> 10 </X> <Y> 2 </Y> </HotPoint>
		</Img>

	</ImgListDef>

	<!--
		Facultatif.
		Maintenant que toutes les images de l'oiseau ont été récupérées, le fichier Piaf.png n'est plus nécessaire.
		On libère sa mémoire.
		Dans tous les cas, la mémoire des fichiers image source est libérée
		après la création des listes d'images et des sprites.
		Mais il vaut mieux libérer au fur et à mesure, pour optimiser.
		L'application dans son ensemble gère assez mal la mémoire, ça permet donc de ne pas empirer les choses.
	-->
	<FreeImgFile> Piaf </FreeImgFile>

	<!--
		Définition du sprite de l'oiseau utilisant la liste d'image des oiseaux.
		On aurait pu définir plusieurs sprites avec la même liste d'images,
		pour afficher plusieurs oiseaux en même temps.
	-->
	<SpriteDef> <Name> Piaf </Name>
		<ImgList> Piaf_ImgList </ImgList>
	</SpriteDef>

	<!-- Création d'une autre liste, avec une seule image dedans : les collines du décor. -->
	<ImgListDef> <Name> Collines_ImgList </Name>
		<Img> <Name> Collines </Name>
			<ImageSource> Collines </ImageSource>
			<SquareSource> <X> 0 </X> <Y> 0 </Y> <W> 640 </W> <H> 97 </H> </SquareSource>
			<HotPoint> <X> 0 </X> <Y> 96 </Y> </HotPoint>
		</Img>
	</ImgListDef>

	<!-- Libération de la mémoire et définition du sprite. -->
	<FreeImgFile> Collines </FreeImgFile>
	<SpriteDef> <Name> Collines </Name>
		<ImgList> Collines_ImgList </ImgList>
	</SpriteDef>

<!--
	La couleur de "key transparency" par défaut est le rose (rouge=255, bleu=255, vert=0).
	C'est à dire que lorsqu'une image est affichée à l'écran, tous les pixels rose de l'image seront considérés
	comme transparents, et laisseront apparaître les pixels de derrière.
	Cette key transparency par défaut est définie dans le fichier config.txt.
	J'aurais dû la mettre dans le fichier du film, et non dans la config,
	car c'est une valeur qui pourrait être différente d'un film à l'autre.
	Je me suis planté. C'est pas grave.

	Une balise <Img> peut comporter une sous-balise <NotKeyTransparent/>. Ce sera alors une image pas transparente.
	Ces images s'affichent un peu plus rapidement. Il est donc conseillé de mettre du NotKeyTransparent
	chaque fois que c'est possible, en particulier pour les décors de fond, qui peuvent être assez grands.

	Il est également possible d'ajouter une balise de ce type dans une <Img> :
	<KeyTransparency> <Red> 125 </Red> <Blue> 200 </Blue> <Green> 54 </Green> </KeyTransparency>
	pour redéfinir la transparence uniquement pour cette image.

	La balise <SquareSource> et son contenu peut être remplacée par une balise simple <SquareSourceAllImage/>.
	Dans ce cas, l'image récupérée correspond à tout le fichier image source.
	(Hé j'avais oublié ça, je ne m'en suis même pas servi ! ).
-->

</LoadData>


<!-- ****************************************************************************************** -->

<!--
	Définition des procédures.
	Chaque procédure est un morceau de séquence de film.
	Il est possible de les enchaîner, les répéter, les imbriquer et en exécuter plusieurs en parallèle.
	Elles permettent de définir les animations d'éléments indépendants les uns des autres.
	Tout ceci est un peu prise de tête, si ça vous dérange, allez sodomiser votre chien Woulfy.
	(Je vais laisser cette remarque d'adolescent, je l'aime bien).
-->

<!-- Or donc, définition d'une procédure. -->
<Procedure> <Name> LaNuitTombe </Name>

	<!--
		Redéfinition de la couleur de remplissage initial de l'écran.
		Ici, le but est d'utiliser un bleu de plus en plus foncé,
		pour faire genre le ciel qui s'assombrit progressivement car la nuit tombe.
	-->
	<ClearWithColor> <Red> 0 </Red> <Blue> 255 </Blue> <Green> 150 </Green> </ClearWithColor>

	<!--
		Indique qu'il faut attendre	400 millisecondes avant de passer à l'instruction suivante.
	-->
	<Time> 400 </Time>

	<!--
		Même chose qu'avant, mais avec une couleur de remplissage de plus en plus foncée.
	-->
	<ClearWithColor> <Red> 0 </Red> <Blue> 255 </Blue> <Green> 100 </Green> </ClearWithColor>
	<Time> 400 </Time>
	<ClearWithColor> <Red> 0 </Red> <Blue> 255 </Blue> <Green> 50 </Green> </ClearWithColor>
	<Time> 400 </Time>
	<ClearWithColor> <Red> 0 </Red> <Blue> 235 </Blue> <Green> 0 </Green> </ClearWithColor>
	<Time> 400 </Time>
	<ClearWithColor> <Red> 0 </Red> <Blue> 215 </Blue> <Green> 0 </Green> </ClearWithColor>
	<Time> 400 </Time>

</Procedure>

<!-- On pourrait ajouter d'autres procédures ici, à la suite. -->


<!-- ****************************************************************************************** -->

<!--
	Définition du film.
	Le film peut être considéré comme la "procédure principale".
	La balise <Film> et les balises <Procedure> acceptent les mêmes sous-balises.
	Une procédure peut être exécutée dans le film, mais également dans une autre procédure.
	La seule contrainte à respecter est qu'une procédure doit être définie avant de pouvoir être exécutée.
	Cela permet de ne pas avoir à gérer des cas compliqués de dépendance circulaire.
-->
<Film>

	<!--
		Cette balise définit plein de choses.
		Il en faut une au tout début du film, sinon ça plante.
		Par contre, il est déconseillé de la remettre le long du film, car elle gère la mémoire
		de manière un peu à l'arrache, et ça ralentit tout. (Voir remarque précédente à propos de Woulfy).
	-->
	<SetAllSceneInfos>

		<!--
			Définit les sprites à afficher.
			Le contenu de cette balise est constitué d'une suite de noms de Sprites
			(définis préalablement par des <SpriteDef>), séparés par des balises <Next/>.
			Le premier sprite de la liste est affiché en premier, ainsi de suite.
			Donc le premier sprite apparaitra derrière, le suivant par-dessus, etc.
			Il n'y a pas de limite théorique à la quantité de sprite affiché, mais s'il y en a beaucoup,
			ça risque d'être lent.
			Cette balise peut être incluse directement dans le film ou dans une procédure, sans la
			mettre dans une balise <SetAllSceneInfos>.
		-->
		<PlanRedef>
			Collines <Next/> Piaf
		</PlanRedef>

		<!--
			Zoom global de la scène, à indiquer en "1024ème de zoom".
			1024 : zoom x1. 2048 : zoom x2. Etc.
			On ne peut mettre que des nombres entiers.
			Pour effectuer la même action directement dans le film ou dans une procédure, utiliser la balise :
			<SetZoom> {nombre} </SetZoom>
		-->
		<Zoom> 1024 </Zoom>

		<!--
			Définit la couleur de remplissage initial de l'écran.
			Cette balise peut être incluse directement dans le film ou dans une procédure.
			Pour plus de détail, voir la procédure définit plus haut.
		-->
		<ClearWithColor> <Red> 0 </Red> <Blue> 255 </Blue> <Green> 200 </Green> </ClearWithColor>

		<!--
			Définit le point central de la caméra et la taille de la scène.
			Ce n'est pas forcément très bien géré.
			On ne peut pas redéfinir la taille, à moins de mettre plus loin
			une autre balise </SetAllSceneInfos>, ce qui est déconseillé.
			De plus, quel que soit la taille de la scène, et aussi bien en plein écran qu'en fenêtré,
			le film s'affiche avec une résolution de 640*480 pixels.

			Si le zoom actuel est supérieur à 1024, seule une partie de la scène est visible.
			Dans ce cas, on peut se permettre de déplacer la caméra. Pour cela, utiliser une balise :
			<SetCamPos> <X> {nombre entier} </X> <Y> {nombre entier} </Y> </SetCamPos>
			La balise <SetCamPos> peut être incluse directement dans le film ou dans une procédure.
		-->
		<CamPosAndSize> <X> 319 </X> <Y> 239 </Y> <W> 640 </W> <H> 480 </H> </CamPosAndSize>

	</SetAllSceneInfos>

	<!-- Définition d'info pour le sprite "Collines" -->
	<Sprite> <Name> Collines </Name>

		<!-- Cette balise permet de définir pleins d'infos d'un sprite. -->
		<SetAllSpriteInfos>

			<!-- Placement du Sprite sur la scène (plus exactement, placement de son hotpoint) -->
			<Pos> <X> 0 </X> <Y> 479 </Y> </Pos>

			<!--
				Définition de l'image du sprite à afficher.
				Le sprite "Collines" ne possède qu'une seule image, appelée "Collines" elle aussi.
			-->
			<Img> Collines </Img>

			<!--

				Les autres sous-balises de <SetAllSpriteInfos> :

				<Zoom> (nombre) </Zoom>.
				Indique si le sprite est grossi ou rapetici.
				Je n'ai jamais su comment faire ce participe passé de merde : "rapetici",
				Putain, de langue française.
				C'est comme le zoom de scène, mais appliqué sur un sprite.
				L'unité est le "1024ème de zoom". La valeur par défaut est 1024.

				<Portion> <X> 0 </X> <Y> 10 </Y> <W> 15 </W> <H> 12 </H> </Portion>
				Permet d'afficher une partie seulement de l'image.
				C'est géré un peu bizarrement, mais ça marche.
				Par défaut, c'est l'image entière qui est affichée.
			-->

		</SetAllSpriteInfos>

	<!-- Fin des actions avec le sprite "Collines". On je passe à autre chose -->
	</Sprite>

	<!-- Même chose, mais avec le sprite du piaf -->
	<Sprite> <Name> Piaf </Name>
		<SetAllSpriteInfos>
			<Pos> <X> 500 </X> <Y> 200 </Y> </Pos>
			<Img> Ailes_plies </Img>
		</SetAllSpriteInfos>
	</Sprite>

	<Time> 500 </Time>

	<Sprite> <Name> Piaf </Name>

		<!--
			Redéfinition de l'image du sprite à afficher
			Même effet que la balise <Img> dans <SetAllSpriteInfos>.
		-->
		<SetImg> Ailes_haut </SetImg>

		<!--
			Déplacement du sprite,
			on ajoute les coordonnées indiquées à ses coordonnées actuelles.
		-->
		<Move> <X> 15 </X> <Y> -10 </Y> </Move>

		<!--
			Redéfinition du zoom.
			Même effet que la balise <Zoom> dans <SetAllSpriteInfos>
			On a l'impression que l'oiseau se rapproche, car on augmente son zoom. Yeah !
		-->
		<SetZoom> 1152 </SetZoom>

		<!--
			Les balises <Time> peuvent être intégrées dans les balises <Film> et <Procedure>,
			mais aussi les balises <Sprite>. Ca peut aider à rendre le script (un peu) moins verbeux.
		-->
		<Time> 400 </Time>

		<!--
			Ensuite, c'est la même chose.
			On déplace l'oiseau, et on définit successivement ses images et son zoom de l'oiseau,
			pour le faire voler.
			Des fois aussi l'oiseau, il boit de l'alcool, parce que ce sont des gros junky
			(comme les pigeons dans Sam et Max). Là dans ce dessin animé il boit pas d'alcool car sinon
			j'aurais dû dessiné encore plus d'images et c'est déjà assez lourdingue comme ça.
		-->
		<SetImg> Ailes_bas </SetImg>
		<Move> <X> 15 </X> <Y> -10 </Y> </Move>
		<SetZoom> 1280 </SetZoom>
		<Time> 400 </Time>

		<SetImg> Ailes_plies </SetImg>
		<Move> <X> 15 </X> <Y> -10 </Y> </Move>
		<SetZoom> 1408 </SetZoom>
		<Time> 400 </Time>

	</Sprite>

	<!--
		Emission d'un son.
		Il est possible d'en jouer plusieurs en même temps, en les démarrant ensemble ou en décalé.
		Le nombre de sons simultanés est limité, et défini dans le fichier de config.
		A priori, c'est la balise <ChannelQuantity>, mais je ne suis plus très sûr.
		On ne peut pas mettre de balise PlaySound dans une balise <Sprite>.
	-->
	<PlaySound> Croa </PlaySound>

	<!-- On continue de faire voler l'oiseau. -->
	<Sprite> <Name> Piaf </Name>

		<SetImg> Ailes_haut </SetImg>
		<Move> <X> 15 </X> <Y> -10 </Y> </Move>
		<SetZoom> 1536 </SetZoom>
		<Time> 400 </Time>

		<SetImg> Ailes_bas </SetImg>
		<Move> <X> 20 </X> <Y> -10 </Y> </Move>
		<SetZoom> 1664 </SetZoom>
		<Time> 400 </Time>

	</Sprite>

	<!--
		Exécution de la procédure "La Nuit Tombe".
		Toutes les actions qui sont décrites dedans sont copié-collées dans le film,
		mais le fait d'exécuter la procédure ne fait pas avancer le temps global du film.
		Les actions décrites juste après vont donc se dérouler en parallèle des actions de la procédure.

		On peut faire des choses un peu plus élaborés avec les procédures, voir plus loin.

		J'ai un ami à moi, son prénom c'est "Plus" et son nom de famille c'est "Loin".
		Alors des fois, on dit : "voir Plus Loin". Hahaha !
	-->
	<Exec> LaNuitTombe </Exec>

	<!-- On continue de faire voler l'oiseau et de jouer le son. -->
	<Sprite> <Name> Piaf </Name>

		<SetImg> Ailes_plies </SetImg>
		<Move> <X> 20 </X> <Y> -10 </Y> </Move>
		<SetZoom> 1792 </SetZoom>
		<Time> 400 </Time>

	</Sprite>

	<PlaySound> Croa </PlaySound>

	<Sprite> <Name> Piaf </Name>

		<SetImg> Ailes_haut </SetImg>
		<Move> <X> 20 </X> <Y> -10 </Y> </Move>
		<SetZoom> 1920 </SetZoom>
		<Time> 400 </Time>

		<SetImg> Ailes_bas </SetImg>
		<Move> <X> 20 </X> <Y> -10 </Y> </Move>
		<SetZoom> 2048 </SetZoom>
		<Time> 400 </Time>

		<SetImg> Ailes_plies </SetImg>
		<Move> <X> 20 </X> <Y> -10 </Y> </Move>
		<SetZoom> 2176 </SetZoom>
		<Time> 400 </Time>

	</Sprite>

	<PlaySound> Croa </PlaySound>

	<Sprite> <Name> Piaf </Name>

		<SetImg> Ailes_haut </SetImg>
		<Move> <X> 20 </X> <Y> -10 </Y> </Move>
		<SetZoom> 2304 </SetZoom>
		<Time> 400 </Time>

	</Sprite>

<!-- C'est fini. Fermeture de la balise Film, puis de la balise SPLASH. -->
</Film>

</SPLASH>


<!--

	Autres balises, non présentes dans ce film d'exemple :

	**** Les différente façon de rafraichir l'écran ****

	On a vu la balise <ClearWithColor>, qui peut être placée dans le film, dans une procédure
	ou dans une balise <SetAllSceneInfos>.
	Lorsqu'on a une image de fond recouvrant toute la scène,
	il n'est pas nécessaire de la pré-recouvrir avec une couleur,
	dans ce cas, on peut utiliser une balise <NoClear/>.

	D'autre part, il existe aussi la balise <ClearWithBlackColor/>,
	équivalente à <ClearWithColor> avec une couleur à (0, 0, 0).


	**** Autres sous-balises de la balise <Sprite> ****

	<SetPortion>
	Elle fonctionne comme la balise <Portion>.
	<Portion> doit être mise dans une balise <SetAllSpriteInfo>.
	<SetPortion> doit être directement mise dans une balise <Sprite>.

	<SetZoom>
	Elle fonctionne comme la balise <Zoom>.
	<Zoom> doit être mise dans une balise <SetAllSpriteInfo>.
	<SetZoom> doit être directement mise dans une balise <Sprite>.

	<SetPos>
	Elle fonctionne comme la balise <Pos>.
	Blablablablabla.


	**** Echange de deux sprites ****

	<Swap2Plans> {nom_sprite_1} <Next/> {nom_sprite_2} </Swap2Plans>

	Intégrable dans un film ou dans une procédure.
	Elle permet d'échanger l'ordre d'affichage de deux sprites, par exemple, quand l'un passe devant l'autre).
	Lorsqu'il y a beaucoup de modifs dans l'ordre d'affichage, il vaut mieux mettre un <PlanRedef>
	pour tout remettre au clair, plutôt que des Swap2Plans.


	**** Arrêt de tous les sons en cours. ****

	<StopSound>
	Intégrable dans un film ou dans une procédure.


	**** Les breakpoints ****

	Ces balises sont intégrables dans un film ou dans une procédure, mais il est conseillé d'en mettre
	uniquement dans le film, au moment d'une nouvelle scène ou d'une nouvelle séquence.
	Elles permettent à l'utilisateur de faire des avances rapides / retour arrière.

	<BreakPoint> 0 <BreakPoint>
	Définit un point d'arrêt de niveau 0 (niveau "principal").
	Lorsque l'utilisateur appuie sur sur la touche Page Up, le player se place au précédent breakpoint
	de niveau 0 et rejoue le film à partir de ce moment. Les breakpoints de niveau 1 ne sont pas pris en compte.
	La touche Page Down place le player au breakpoint suivant de niveau 0.

	<BreakPoint> 1 <BreakPoint>
	Définit un point d'arrêt de niveau 1 (niveau plus précis).

	Lorsque l'utilisateur appuie sur sur la flèche du haut, le player se place au précédent breakpoint
	de niveau 0 ou 1, et rejoue le film à partir de ce moment.
	La flèche du bas place le player au breakpoint suivant de niveau 0 ou 1.

	Lorsque l'utilisateur se déplace vers un breakpoint (quel que soit son niveau),
	les actions suivantes sont effectuées :

	 - <NoClear/> : le rafraichissement est fixé à "pas de rafraîchissement".
	 - <SetZoom> : Le Zoom de la scène est fixé à 1024.
	 - <SetCamPos> : La position de la caméra est fixée à 319, 239.
	 - Mais la liste d'affichage des sprites, ainsi que leurs positions, zooms, et portions ne sont pas redéfinis !

	Après une balise BreakPoint, il est donc fortement conseillé de placer les balises suivantes :

	 - <ClearWithColor>, <SetZoom>, <SetCamPos> : si les valeurs par défaut ne conviennent pas.
	 - <PlanRedef> : pour redéfinir la liste d'affichage des sprites
	 - une balise <SetAllSpriteInfos> pour chaque sprite affiché, avec redéfinition de la position, du zoom, etc.


	**** Exécution avancée de procédures ****

	<Exec> {nom_procedure} </Exec>
	Exécution d'une procédure de manière simple.

	<ExecComplex> <Name> {nom_procedure} </Name>
		<Duration> {temps_en_millisecondes} </Duration>
	</ExecComplex>
	La procédure va s'exécuter pendant le temps indiqué. Si elle est plus longue, sa fin sera coupée.
	Ca peut être utile pour animer une personne qui parle. On définit une seule grande procédure
	contenant des mouvements de bouche, et on s'en sert à plusieurs endroits du film, en mettant un temps
	différent à chaque fois, selon que le personnage parle plus ou moins longtemps.
	Du coup, la synchro entre la forme de la bouche et les paroles est totalement foireuse,
	mais on ne peut pas tout avoir.

	<ExecComplex> <Name> {nom_procedure} </Name>
		<AddTime/>
	</ExecComplex>
	Exécution "séquentielle" de la procédure, et non pas "parallèle".
	Pendant que cette procédure s'exécute, les actions décrites après ne le sont pas.
	On attend la fin de la procédure avant de passer à la suite.

	Il est possible de mettre à la fois une balise </Duration> et une balise <AddTime/> dans une balise <ExecComplex>


	**** Voilà c'est tout ****

	Là c'est le moment où je rajoute une dernière bêtise pour faire rigoler les gens.
	Mais en fait j'ai pas envie, parce qu'il est 4h30 du matin, on est dimanche (enfin je veux dire lundi),
	et demain (enfin je veux dire aujourd'hui) je bosse.

	Tchô !!!

-->
