<!--
	https://github.com/darkrecher/pru-pra-prok
	Ceci est un exemple de film écrit en SPLASH (du pseudo-XML crados).
	Je vous aurais prévenus. En plus mes explications sont bordelique parce que j'ai pas que ça à foutre
	de décrire mon format de POILS BITE VAGIN COUILLES NICHONS MENOPAUSE URÊTRE PHALLUS !!!
-->


<!-- Balise initiale obligatoire. Parce que j'avais envie -->
<? paye ta chatte ?>

<!--
	Balise englobante obligatoire.
	"SPLASH" signifie : South Park, L'Abominable Script à Histoire.
	Ça ne veut rien dire, mais l'acronyme est rigolo.
-->
<SPLASH>

<!--
	Facultatif.
	Utile uniquement pour la barre de progression lors du chargement initial.
	Si ces infos sont absentes ou incorrectes, ça fonctionne quand même, mais la barre de progress est imprécise.
-->
<ProgressBarInfo>
	<!-- Nombre de fichiers images et sons à charger. (Nombre d'élément dans la balise ImgSoundFiles) -->
	<FileToExtract> 3 </FileToExtract>
	<!-- Nombre de listes d'images (balises ImgListDef) -->
	<ImgListToCreate> 2 </ImgListToCreate>
	<!-- Nombre de Procédure (balises Procedure) -->
	<ProcedureToCreate> 1 </ProcedureToCreate>
</ProgressBarInfo>

<!-- Déclaration des fichiers images et sons à charger. -->
<ImgSoundFiles>
	<!--
		Format d'image : .png uniquement.
		Format des sons : .wav uniquement.
		Les fichiers doivent être dans le même répertoire que le film.
		On peut également utiliser des fichiers compressés dans un format spécifique.
		Voir le readme de l'utilitaire ConcatFile pour plus d'infos. (TODO : je ne me suis pas encore occupé de ça).
	-->
	<LoadImg> Collines </LoadImg>
	<LoadImg> Piaf </LoadImg>
	<LoadSnd> Croa </LoadSnd>
</ImgSoundFiles>


<!-- ****************************************************************************************** -->

<!-- Définition des listes d'images, qui serviront ensuite à faire les sprites. -->
<LoadData>

	<!-- Une première liste, qui contiendra toutes les images de l'oiseau. -->
	<ImgListDef> <Name> Piaf_ImgList </Name>

		<!-- Déclaration de la première image. -->
		<Img> <Name> Ailes_plies </Name>

			<!-- Indique le fichier image source (correspond à un nom mentionné dans une balise LoadImg). -->
			<ImageSource> Piaf </ImageSource>

			<!--
				Définition du carré délimitant l'image à récupérer, dans le fichier image source.
				X, Y : coordonnées du coin supérieur gauche.
				W, H : width (largeur), height (longueur).
			-->
			<SquareSource> <X> 0 </X> <Y> 0 </Y> <W> 33 </W> <H> 20 </H> </SquareSource>

			<!--
				Coordonnées du hot-point.
				Le placement de l'image à l'écran est effectué par rapport au hot-point.
				C'est plus pratique que de placer par rapport au coin supérieur gauche.
				Pour chaque image du sprite, le hot-point doit toujours indiquer le même élément,
				afin d'éviter des mouvements bizarres lors d'un changement d'image.
				Pour l'oiseau, j'ai choisi de placer le hot-point entre ses deux yeux.
				Blablabla blablabla, qu'est-ce que je peux raconter comme conneries quand je m'y mets.
				J'en ai rien à carrer, c'est pas comme si mes explications devaient être claires.
			-->
			<HotPoint> <X> 16 </X> <Y> 6 </Y> </HotPoint>

		</Img>

		<!-- La deuxième image de la liste. -->
		<Img> <Name> Ailes_haut </Name>
			<ImageSource> Piaf </ImageSource>
			<SquareSource> <X> 33 </X> <Y> 0 </Y> <W> 33 </W> <H> 24 </H> </SquareSource>
			<HotPoint> <X> 16 </X> <Y> 17 </Y> </HotPoint>
		</Img>

		<!-- La dernière. -->
		<Img> <Name> Ailes_bas </Name>
			<ImageSource> Piaf </ImageSource>
			<SquareSource> <X> 66 </X> <Y> 0 </Y> <W> 21 </W> <H> 29 </H> </SquareSource>
			<HotPoint> <X> 10 </X> <Y> 2 </Y> </HotPoint>
		</Img>

	</ImgListDef>

	<!--
		Facultatif.
		Maintenant que toutes les images de l'oiseau ont été récupérées, le fichier Piaf.png n'est plus nécessaire.
		On libère sa mémoire.
		La mémoire de tous les fichiers image source est systématiquement libérée après la création des listes d'images et des sprites.
		Mais il vaut mieux la libérer au fur et à mesure, ça optimise un peu son utilisation.
		(L'application dans son ensemble gère assez mal la mémoire, ça permet de ne pas empirer les choses).
	-->
	<FreeImgFile> Piaf </FreeImgFile>

	<!--
		Définition du sprite de l'oiseau utilisant la liste d'image des oiseaux.
		On peut définir plusieurs sprites ayant la même liste d'images,
		pour afficher plusieurs oiseaux en même temps.
	-->
	<SpriteDef> <Name> Piaf </Name>
		<ImgList> Piaf_ImgList </ImgList>
	</SpriteDef>

	<!-- Création d'une autre liste, avec une seule image dedans : les collines du décor. -->
	<ImgListDef> <Name> Collines_ImgList </Name>
		<Img> <Name> Collines </Name>
			<ImageSource> Collines </ImageSource>
			<SquareSource> <X> 0 </X> <Y> 0 </Y> <W> 640 </W> <H> 97 </H> </SquareSource>
			<HotPoint> <X> 0 </X> <Y> 96 </Y> </HotPoint>
		</Img>
	</ImgListDef>

	<!-- Libération de la mémoire et définition du sprite. -->
	<FreeImgFile> Collines </FreeImgFile>
	<SpriteDef> <Name> Collines </Name>
		<ImgList> Collines_ImgList </ImgList>
	</SpriteDef>

<!--
	La couleur de "key transparency" par défaut est le rose (rouge=255, bleu=255, vert=0).
	C'est à dire que lorsqu'une image est affichée à l'écran, tous les pixels rose de l'image seront considérés
	comme des pixels transparents, et laisseront apparaître l'image de derrière, ou la couleur de fond.
	Cette key transparency par défaut est définie dans le fichier config.txt.
	J'aurais dû mettre cette définition dans le fichier du film, et non dans la config.
	Car c'est une valeur qui pourrait être différente d'un film à l'autre.
	Mais je me suis planté. C'est pas grave.

	Il est possible d'ajouter la balise <NotKeyTransparent/> dans une balise <Img>.
	Ce sera alors une image sans key transparency.
	L'affichage des images sans key transparency est un peu plus rapide, il est donc conseillé de mettre cette balise
	pour toutes les images où c'est possible, en particulier les décors de fond, qui ont une taille importante.

	Il est également possible d'ajouter une balise de ce type dans une <Img> :
	<KeyTransparency> <Red> 125 </Red> <Blue> 200 </Blue> <Green> 54 </Green> </KeyTransparency>
	Cela permet de redéfinir la key transparency uniquement pour cette image.

	La balise <SquareSource> et son contenu peut être remplacé par une balise simple <SquareSourceAllImage/>.
	Dans ce cas, l'image récupérée correspondra à l'image entière du fichier.
	(Hé j'avais oublié cette balise, je ne m'en suis même pas servi ! ).
-->

</LoadData>


<!-- ****************************************************************************************** -->

<!--
	Définition des procédures.
	Chaque procédure est un morceau de séquence de film.
	Il est possible de les enchaîner, les répéter, les imbriquer, et en exécuter plusieurs en parallèle.
	Ça permet de définir les animations de plusieurs éléments indépendants les uns des autres.
	Tout ceci est un peu prise de tête, si ça vous dérange, allez sodomiser votre chien Woulfy.
	(Je vais laisser cette remarque d'adolescent, je l'aime bien).
-->

<!-- Or donc, définition d'une procédure. -->
<Procedure> <Name> LaNuitTombe </Name>

	<!--
		Cette balise permet de redéfinir la couleur de remplissage initial de l'écran.
		Ici, le but est de remplir l'écran avec un bleu de plus en plus foncé,
	et ça fait genre le ciel qui s'assombrit car la nuit tombe.
	-->
	<ClearWithColor> <Red> 0 </Red> <Blue> 255 </Blue> <Green> 150 </Green> </ClearWithColor>

	<!--
		Indique qu'il faut attendre	400 millisecondes avant de passer à l'instruction suivante.
	-->
	<Time> 400 </Time>

	<!--
		Même chose qu'avant, mais avec une couleur de plus en plus foncée.
		L'écran sera rempli avec un bleu de plus en plus foncé,
		pour faire le ciel qui s'assombrit et la nuit qui tombe.
	-->
	<ClearWithColor> <Red> 0 </Red> <Blue> 255 </Blue> <Green> 100 </Green> </ClearWithColor>
	<Time> 400 </Time>
	<ClearWithColor> <Red> 0 </Red> <Blue> 255 </Blue> <Green> 50 </Green> </ClearWithColor>
	<Time> 400 </Time>
	<ClearWithColor> <Red> 0 </Red> <Blue> 235 </Blue> <Green> 0 </Green> </ClearWithColor>
	<Time> 400 </Time>
	<ClearWithColor> <Red> 0 </Red> <Blue> 215 </Blue> <Green> 0 </Green> </ClearWithColor>
	<Time> 400 </Time>

</Procedure>

<!-- On pourrait ajouter d'autres procédures ici, à la suite. -->


<!-- ****************************************************************************************** -->

<!--
	Définition du film.
	Le film peut être considéré comme la "procédure principale".
	La balise <Film> et les balises <Procedure> acceptent les mêmes sous-balises.
	Il est possible d'exécuter une procédure dans le film, ainsi que dans une autre procédure.
	La seule contrainte à respecter est qu'une procédure doit être définie avant de pouvoir être exécutée.
	Cette contrainte permet, au passage, de ne pas avoir à gérer des cas compliqués de dépendance circulaire.
-->
<Film>

	<!--
		Cette balise définit plein de choses.
		Il en faut une au tout début du film, sinon ça plante.
		Par contre, il est déconseillé de la remettre le long du film, car elle gère la mémoire
		de manière un peu à l'arrache, et ça ralentit tout. (Voir remarque précédente à propos de Woulfy).
	-->
	<SetAllSceneInfos>

		<!--
			Définit les sprites à afficher.
			Le contenu de cette balise est constitué d'une suite de noms de Sprites
			(définis préalablement par des <SpriteDef>), et séparés par des balises <Next/>.
			Le premier sprite de la liste est affiché en premier, et ainsi de suite.
			Donc le premier sprite apparaitra derrière, le suivant par-dessus, etc.
			Il n'y a pas de limite théorique à la quantité de sprite affiché, mais s'il y en a beaucoup,
			ça risque d'être lent.
			Cette balise peut être incluse directement dans le film ou dans une procédure, sans la
			mettre dans une balise <SetAllSceneInfos>.
		-->
		<PlanRedef>
			Collines <Next/> Piaf
		</PlanRedef>

		<!--
			Zoom global de la scène, à indiquer en "1024ème de zoom".
			1024 : zoom x1. 2048 : zoom x2. Etc.
			On ne peut mettre que des nombres entiers.
			Pour effectuer la même action directement dans le film ou dans une procédure, utiliser la balise :
			<SetZoom> {nombre} </SetZoom>
		-->
		<Zoom> 1024 </Zoom>

		<!--
			Définit la couleur de remplissage initial de l'écran.
			Cette balise peut être incluse directement dans le film ou dans une procédure.
			Pour plus de détail, voir la procédure définit plus haut.
		-->
		<ClearWithColor> <Red> 0 </Red> <Blue> 255 </Blue> <Green> 200 </Green> </ClearWithColor>

		<!--
			Définit le point central de la caméra et la taille de la scène.
			C'est pas forcément très bien géré.
			On ne peut pas redéfinir la taille de la scène, à moins de mettre plus loin
			une autre balise </SetAllSceneInfos>, ce qui est déconseillé.
			De plus, quel que soit la taille de la scène, le film s'affiche avec une résolution de 640*480 pixels.
			(aussi bien en plein écran qu'en fenêtré).
			---
			Si le zoom actuel est supérieur à 1024, on n'affiche qu'une partie de la scène.
			Dans ce cas, on peut se permettre de déplacer la caméra, pour afficher une autre partie.
			Pour cela, utiliser une balise :
			<SetCamPos> <X> {nombre entier} </X> <Y> {nombre entier} </Y> </SetCamPos>
			La balise <SetCamPos> peut être incluse directement dans le film ou dans une procédure.
		-->
		<CamPosAndSize> <X> 319 </X> <Y> 239 </Y> <W> 640 </W> <H> 480 </H> </CamPosAndSize>

	</SetAllSceneInfos>

	<!-- là c'est pour dire que je vais faire des trucs avec le sprite du piaf -->
	<Sprite> <Name> Collines </Name>

		<!-- ça c'est la balise pour définir, en une fois, plein de trucs du sprite -->
		<SetAllSpriteInfos>

			<!-- là on dit où placer le sprite (plus exactement, ou placer le hotpoint du sprite) -->
			<Pos> <X> 0 </X> <Y> 479 </Y> </Pos>

			<!-- là on dit quel image du sprite afficher -->
			<Img> Collines </Img>

			<!-- autre chose qu'on peut ajouter dans une balise <SetAllSpriteInfos> :

				<Zoom> (nombre) </Zoom>. Permet de définir si le sprite est grossi ou rapetici
				(je'ai jamais su comment écrire ce mot de merde "rapetici", si ça se trouve c'est
				même pas comme ça qu'on dit. Putain, c'est pourri des fois la langue française)
				En fait c'est comme le zoom de scène, sauf que ça s'applique que au sprite.
				Et pareil, c'est donné en "1024ème de zoom". Si on ne précise rien, la valeur par
				défaut est, justement, 1024.

				<Portion> <X> 0 </X> <Y> 10 </Y> <W> 15 </W> <H> 12 </H> </Portion>
				Permet de dire qu'on veut afficher juste un bout de l'image. Euh cest géré un peu
				bizarrement, mais ça marche. Si on ne précise pas cette balise, c'est l'image entière
				qui est affichée.
			-->

		</SetAllSpriteInfos>

	<!-- là je dis que j'ai fini de faire des trucs avec le sprite "Collines", et je passe à autre chose -->
	</Sprite>

	<!-- Bon là c'est pareil, mais pour le piaf -->
	<Sprite> <Name> Piaf </Name>
		<SetAllSpriteInfos>
			<Pos> <X> 500 </X> <Y> 200 </Y> </Pos>
			<Img> Ailes_plies </Img>
		</SetAllSpriteInfos>
	</Sprite>

	<Time> 500 </Time>

	<!-- hop, on reprend le sprite du piaf -->
	<Sprite> <Name> Piaf </Name>

		<!-- ça c'est pour redéfinir l'image du sprite à afficher (pareil que <Img>
			dans la balise <SetAllSpriteInfos>)
		-->
		<SetImg> Ailes_haut </SetImg>

		<!-- là ben c'est pour bouger le sprite -->
		<Move> <X> 15 </X> <Y> -10 </Y> </Move>

		<!-- là c'est pour redéfinir son zoom. Comme la balise <Zoom> dans <SetAllSpriteInfos>
			Ca fait genre comme si l'oiseau se rapproche. Car on augmente la valeur du zoom. Ouahou!
		-->
		<SetZoom> 1152 </SetZoom>

		<!-- Là c'est cool, parce qu'on peut mettre une balise <Time> dans une balise sprite,
			et aussi directement dans les balises <Film> et <Procedure> (comme on a vu précédemment)
		-->
		<Time> 400 </Time>

		<!-- bon la suite c'est pas compliqué, on connait déjà, c'est pour faire que
			l'oiseau il bouge en volant. Et puis des fois aussi l'oiseau il boit de l'alcool, pasque les
			oiseaux c'est des gros junky (comme les pigeons dans Sam et Max), mais là il boit pas d'alcool
			parce que sinon il aurait fallu que je dessine encore plus d'images et c'est déjà assez lourdingue
			comme ça.
		-->
		<SetImg> Ailes_bas </SetImg>
		<Move> <X> 15 </X> <Y> -10 </Y> </Move>
		<SetZoom> 1280 </SetZoom>
		<Time> 400 </Time>

		<SetImg> Ailes_plies </SetImg>
		<Move> <X> 15 </X> <Y> -10 </Y> </Move>
		<SetZoom> 1408 </SetZoom>
		<Time> 400 </Time>

	<!-- là je laisse tomber le sprite du piaf, car il faut jouer un son -->
	</Sprite>

	<!-- Hop! Là on joue un son. Il est possible de jouer plusieurs sons en même temps (ça additionne)
		Mais c'est limité à un certain nombre, défini dans le fichier de config, à je sais plus quel endroit.
		Je crois que c'est une balise <ChannelQuantity>
		On ne peut pas mettre de balise PlaySound dans une balise <Sprite>. (C'est pour ça que j'ai fermé
		celle du piaf juste avant, et que je la rouvre juste après.
	-->
	<PlaySound> Croa </PlaySound>

	<!-- Bon là on continue de faire voler l'oiseau (j'aurais pu mettre des bouts de ces trucs dans une procédure,
		Pour diminuer la longueur du code, mais j'ai pas envie de me prendre la tête, c'est juste un film
		d'exemple.
	-->
	<Sprite> <Name> Piaf </Name>

		<SetImg> Ailes_haut </SetImg>
		<Move> <X> 15 </X> <Y> -10 </Y> </Move>
		<SetZoom> 1536 </SetZoom>
		<Time> 400 </Time>

		<SetImg> Ailes_bas </SetImg>
		<Move> <X> 20 </X> <Y> -10 </Y> </Move>
		<SetZoom> 1664 </SetZoom>
		<Time> 400 </Time>

	</Sprite>

	<!-- Là c'est pour exécuter la procédure de la nuit qui tombe. Toutes les actions décrites par cette
		procédure sont copiées collées dans le film, mais le fait d'exécuter la procédure ne fait pas avancer
		le temps global du film. En gros, les actions décrites juste après vont se dérouler en même temps que les
		actions de la procédure.
		On peut faire des trucs un peu plus élaborés avec les procédures, voir plus loin. J'ai un ami à moi, son
		prénom c'est "Plus" et son nom de famille c'est "Loin". Alors des fois on dit comme ça : "voir Plus Loin".
		Hahahaa! c'est drôle. Enfin c'est pas ça le plus drôle avec cet ami. Le plus drôle c'est de se moquer de
		lui parce qu'il a un prénom ridicule. Ca va, ça vous embête pas trop que je raconte ma vie dans ce fichier?
		Nan pasque moi je trouve ça cool.
	-->
	<Exec> LaNuitTombe </Exec>

	<!-- hop, on continue de faire des trucs avec le piaf et de jouer du son. -->
	<Sprite> <Name> Piaf </Name>

		<SetImg> Ailes_plies </SetImg>
		<Move> <X> 20 </X> <Y> -10 </Y> </Move>
		<SetZoom> 1792 </SetZoom>
		<Time> 400 </Time>

	</Sprite>

	<PlaySound> Croa </PlaySound>

	<Sprite> <Name> Piaf </Name>

		<SetImg> Ailes_haut </SetImg>
		<Move> <X> 20 </X> <Y> -10 </Y> </Move>
		<SetZoom> 1920 </SetZoom>
		<Time> 400 </Time>

		<SetImg> Ailes_bas </SetImg>
		<Move> <X> 20 </X> <Y> -10 </Y> </Move>
		<SetZoom> 2048 </SetZoom>
		<Time> 400 </Time>

		<SetImg> Ailes_plies </SetImg>
		<Move> <X> 20 </X> <Y> -10 </Y> </Move>
		<SetZoom> 2176 </SetZoom>
		<Time> 400 </Time>

	</Sprite>

	<PlaySound> Croa </PlaySound>

	<Sprite> <Name> Piaf </Name>

		<SetImg> Ailes_haut </SetImg>
		<Move> <X> 20 </X> <Y> -10 </Y> </Move>
		<SetZoom> 2304 </SetZoom>
		<Time> 400 </Time>

	</Sprite>

<!-- et voilà, c'est fini!!! -->
</Film>

<!-- et là je ferme ma balise SPLASH pour clore le tout. Youplaboum!! -->
</SPLASH>


<!-- autres balises qu'on peut mettre mais que j'ai pas utilisées dans cet exemple :

	**** Les différente façon de rafraichir l'écran ****

	Il y a la balise <ClearWithColor> <Red> 0 </Red> <Blue> 255 </Blue> <Green> 200 </Green> </ClearWithColor>
	Qu'on peut mettre soit directement dans le film ou dans une procédure, soit dans une balise <SetAllSceneInfos>
	Mais si on a une image de fond qui prend tout l'écran, c'est pas la peine de tout recouvrir avec une couleur
	Dans ce cas, on peut mettre une balise <NoClear/> à la place.
	On peut aussi mettre : <ClearWithBlackColor/>, c'est l'équivalent d'un <ClearWithColor> avec des 0 partout.


	**** balises à mettre dans une balise <sprite> ****

		La balise <SetPortion>, fonctionne pareil que la balise <Portion>. La seule différence c'est que
		<Portion> on doit la mettre dans une balise <SetAllSpriteInfo>, alors que <SetPortion> se met
		directement dans une balise <Sprite>

		<SetZoom>, fonctionne pareil que <Zoom>. <Zoom> doit être mis dans une balise <SetAllSpriteInfo>,
		<SetZoom> peut être mis directement dans une balise <Sprite>

		<SetPos>, pour définir la position d'un sprite. Fonctionne pareil que <Pos>, blablablablabla.


	**** échange de deux sprites ****

	<Swap2Plans> (un nom de sprite) <Next/> (un autre nom de sprite) </Swap2Plans>
	Cette balise doit être mise dans un film ou dans une procédure. Elle permet d'échanger l'ordre d'affichage
	de deux sprites. (Genre quand y'en a un qui passe devant l'autre). C'est pas super pratique, en fait la plupart
	du temps, vaut mieux faire un <PlanRedef> pour tout remettre au clair, plutôt que des Swap.


	**** <StopSound> ****

	A mettre dans un film ou une procédure, ça arrête de jouer tous les sons en cours.


	**** Les breakpoint ****

	Ca c'est cool.
	Dans le film ou une procédure (mais c'est conseillé d'en mettre uniquement dans le film), on peut mettre ça :
	<BreakPoint> (0 ou 1) <BreakPoint>
	Ca indique un point d'arrêt, quand l'utilisateur fait avance rapide ou retour arrière.
	Si l'utilisateur appuie sur page up/page down, le film va jusqu'au prochain/précédent breakpoint de niveau 0.
	Les breakpoint de niveau 1 ne sont pas pris en compte, car page up/page down c'est pour aller vite.
	Quand l'utilisateur appuie sur les flèches haut/bas, le film va jusqu'au prochain/précédent breakpoint, quel que
	soit son niveau. Ca fait aller moins vite, mais plus précis.
	Il est conseillé de mettre des breakpoint au moment d'une nouvelle scène, et de mettre juste après une balise
	PlanRedef, puis, pour chaque sprite affiché, de mettre une balise <SetAllSpriteInfos>.
	Comme ça, tout est bien redéfini. Sinon ça peut faire des surprise quand l'utilisateur va sur un
	breakpoint alors que la partie de film située avant n'a pas été exécutée.
	Par ailleurs, quand l'utilisateur se déplace vers un breakpoint avec avance rapide ou retour arrière,
	quelques trucs sont redéfinis : le rafraichissement est fixé à <NoClear/>, le Zoom de la scène à 1024, et la
	position de la caméra à 319, 239. (Il s'agit des valeurs les plus courantes).
	Donc pour les cas particuliers, il faudra peut être rajouter, juste après le breakpoint,
	une balise de Clear, une balise de Zoom ou une balise SetCamPos.


	**** Exécutions de procédures avec un peu plus de possiblités (duration et addtime) ****

	On a vu la balise <Exec> pour exécuter une procédure.
	On peut aussi utiliser la balise suivante :
	<ExecComplex> <Name> (le nom d'une procédure) </Name> </ExecComplex>
	Là, comme ça, ça ne fait rien de plus. Mais ensuite, on peut ajouter la balise
	<Duration> (un nombre) </Duration> dans la balise <ExecComplex>. Ca fait que la procédure va s'exécuter
	pendant le temps indiqué. (Si on n'indique pas de temps, la procédure est exécutée en entier).
	On peut aussi mettre une balise <AddTime/> Cela signifie que pendant que la procédure va s'exécuter, les
	actions qui viennent après ne le seront pas. On attend la fin de la procédure avant de passer à la suite.
	On peut bien sur mettre une balise <Duration> et une balise <AddTime/> dans une même balise <ExecComplex>,
	ça se cumule.

	Voilà c'est tout. Ah au fait, les majuscules-minuscules ont une importance.
	Tchô!!!

	Là c'est le moment où je rajoute une dernière bêtise pour faire rigoler les gens.
	Mais en fait j'ai pas envie, parce qu'il est 4h30 du matin, on est dimanche (enfin je veux dire lundi),
	et demain (enfin je veux dire aujourd'hui) je bosse.

-->